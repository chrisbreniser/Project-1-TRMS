package TRMS.controller;

import java.util.List;
import java.util.Set;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;

import TRMS.model.Employee;
import TRMS.model.Form;
import TRMS.service.AuthService;
import TRMS.service.AuthServiceHardCoded;
import TRMS.service.EmployeeService;
import TRMS.service.EmployeeServiceFullStack;
import TRMS.service.FormService;
import TRMS.service.FormServiceFullStack;
import io.javalin.http.Context;
import io.javalin.http.UploadedFile;

public class FormController {
	
	private static Logger log = Logger.getRootLogger();

	private static FormService formService = new FormServiceFullStack();
	
	private static EmployeeService employeeService = new EmployeeServiceFullStack();

	private static AuthController authController = new AuthController();
	
	private Employee currentUser;
	
	public FormController() {
		super();
	}

	public FormController(FormService formService) {
		this.formService = formService;
	}

	public void createForm(Context ctx) {
		
		log.info("FormController.createFrom[Received context " + ctx.toString() + " in controller. Parsing formParams]");
		
		try {
			authController.checkUser(ctx);
			currentUser = employeeService.readEmployeeByUsername(ctx.cookieStore("username"));
		} catch (Exception e1) {
			e1.printStackTrace();
			ctx.status(401);
			ctx.redirect("login.html");
			return;
		}

		
		// pull data out of ctx for form creation
		String event_type = ctx.formParam("event_type");		
		String event_date = ctx.formParam("event_date");
		String event_time = ctx.formParam("event_time");
		String event_location = ctx.formParam("event_location");
		String event_description = ctx.formParam("event_description");
		String grading_format = ctx.formParam("grading_format");
		double event_cost = Double.parseDouble(ctx.formParam("event_cost"));
		String justification = ctx.formParam("justification"); 
		double hours_missed = Double.parseDouble(ctx.formParam("hours_missed", "0"));
		byte[] event_attach = null;
		byte[] pre_app_attach = null;
		
//		 pull out an uploaded file if exists, otherwise, set to null
		try {
			if(ctx.uploadedFile("event_attach") != null){
				event_attach = IOUtils.toByteArray(ctx.uploadedFile("event_attach").getContent());
			}
		} catch (Exception e) {
			log.info("FormController.createFrom[event_attach was null]");
		}
		
//		 pull out an uploaded file if exists, otherwise, set to null
		try {
			if(ctx.uploadedFile("pre_app_attach") != null) {
				pre_app_attach = IOUtils.toByteArray(ctx.uploadedFile("pre_app_attach").getContent());;
			}
		} catch (Exception e) {
			log.info("FormController.createFrom[pre_app_attach was null]");
		}
		
		// create new form to be added to DB later
		Form form = new Form(
				currentUser.getEmployee_id(),
				event_type,
				event_date,
				event_time,
				event_location,
				event_description,
				event_cost,
				event_attach,
				justification,
				grading_format,
				pre_app_attach,
				hours_missed);
		
		// call create from service to add form to DB and get newly created id back in form object
		String status = formService.createFrom(form);
		
		// check if form got a new id that was not -1 and return appropriate response
		if(form.getFormId() != -1 && status == "success") {
			ctx.status(201);
			ctx.html("Created: " + form.toString());
			ctx.redirect("/check_pending_forms.html");
		} else if(status == "invalid funds") {
			ctx.status(406);
			ctx.html("[ERROR: Invalid funds for new request]");
		} else {
			ctx.status(500);
			ctx.html("[ERROR: New ID was not generated by DB]");
		}
	}

	public void readPendingForms(Context ctx) {
		log.info("FormController.readPendingFroms[Received request and checking cookie for user: " + ctx.cookieStore("username") + "]");
		
		try {
			authController.checkUser(ctx);
			currentUser = employeeService.readEmployeeByUsername(ctx.cookieStore("username"));
		} catch (Exception e1) {
			e1.printStackTrace();
			ctx.status(401);
			ctx.redirect("login.html");
			return;
		}
		
		log.info("FormController.readPendingFroms[Username found, getting forms from formService and returning as JSON]");
		
		List<Form> forms = null;
		try {
			forms = formService.readPendingForms(currentUser.getEmployee_id());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		log.info("FormController.readPendingFroms[Received forms and sending as JSON: " + forms.toString() + "]");
		
		ctx.status(200);
		ctx.json(forms);
	}
	
	public void readAssignedForms(Context ctx) {
		log.info("FormController.readAssignedFroms[Received request and calling service]");
		
		log.info("FormController.readAssignedFroms[Checking cookie for user: " + ctx.cookieStore("username") + "]");
		
		try {
			authController.checkUser(ctx);
			currentUser = employeeService.readEmployeeByUsername(ctx.cookieStore("username"));
		} catch (Exception e1) {
			e1.printStackTrace();
			ctx.status(401);
			ctx.redirect("login.html");
			return;
		}
		
		Set<Form> forms = formService.readAssignedForms(currentUser.getUser_name());
		
	
		ctx.status(200);
		ctx.json(forms);
	}

	public void updateForm(Context ctx) {
		log.info("FormController.createFrom[Received context " + ctx.toString() + " in controller. Parsing formParams");
		
		try {
			authController.checkUser(ctx);
			currentUser = employeeService.readEmployeeByUsername(ctx.cookieStore("username"));
		} catch (Exception e1) {
			e1.printStackTrace();
			ctx.status(401);
			ctx.redirect("login.html");
			return;
		}
		
		// pull data out of ctx for form update
		String form_id = ctx.formParam("form_id");
		String event_type = ctx.formParam("event_type");		
		String event_date = ctx.formParam("event_date");
		String event_time = ctx.formParam("event_time");
		String event_location = ctx.formParam("event_location");
		String event_description = ctx.formParam("event_description");
		String grading_format = ctx.formParam("grading_format");
		double event_cost = Double.parseDouble(ctx.formParam("event_cost"));
		String justification = ctx.formParam("justification"); 
		double hours_missed = Double.parseDouble(ctx.formParam("hours_missed", "0"));
		byte[] event_attach = null;
		byte[] pre_app_attach = null;
		
//		 pull out an uploaded file if exists, otherwise, set to null
		try {
			if(ctx.uploadedFile("event_attach") != null){
				event_attach = IOUtils.toByteArray(ctx.uploadedFile("event_attach").getContent());
			}
		} catch (Exception e) {
			log.info("FormController.createFrom[event_attach was null]");
		}
		
//		 pull out an uploaded file if exists, otherwise, set to null
		try {
			if(ctx.uploadedFile("pre_app_attach") != null) {
				pre_app_attach = IOUtils.toByteArray(ctx.uploadedFile("pre_app_attach").getContent());
			}
		} catch (Exception e) {
			log.info("FormController.createFrom[pre_app_attach was null]");
		}
		
		// create new form with updated info to be added to DB later
		Form form = new Form(
				currentUser.getEmployee_id(),
				event_type,
				event_date,
				event_time,
				event_location,
				event_description,
				event_cost,
				event_attach,
				justification,
				grading_format,
				pre_app_attach,
				hours_missed);
		
		// call create from service to add form to DB and get newly created id back in form object
		formService.updateForm(Integer.parseInt(form_id), form);
		
		// check if form got a new id that was not -1 and return appropriate response
		if(form.getFormId() != -1) {
			ctx.status(201);
			ctx.html("Updated: " + form.toString());
			ctx.redirect("check_pending_forms.html");
		} else {
			ctx.status(500);
			ctx.html("[ERROR: New ID was not generated by DB]");
		}
	}

	public void approveForm(Context ctx) {
		
		log.info("FormController.approveFrom[approving form]");
		System.out.println("In approve form!");
		
		FormService formService = new FormServiceFullStack();
		
		boolean result = false;
		
		try {
			authController.checkUser(ctx);
			currentUser = employeeService.readEmployeeByUsername(ctx.cookieStore("username"));
		} catch (Exception e1) {
			e1.printStackTrace();
			ctx.status(401);
			ctx.redirect("login.html");
			return;
		}
		
		// pull data out of ctx
		int formId = Integer.parseInt(ctx.pathParam("id"));
		
		// check user status and direct to correct service
		if(currentUser.getIs_ben_co()) {
			result = formService.approveFormBenCo(formId);
		} else if(currentUser.getIs_dep_head()) {
			result = formService.approveFormDepHead(formId);
		} else if(currentUser.getIs_supervisor()) {
			result = formService.approveFormSupervisor(formId);
		}
		
		// set return on ctx depending on service return boolean
		if(result) {
			ctx.status(200);
			ctx.redirect("/check_assigned_forms.html");
		} else {
			ctx.status(404);
			ctx.redirect("/check_assigned_forms.html");
		}
		return;
	}

	public void rejectForm(Context ctx) {
		log.info("FormController.approveFrom[approving form]");
		System.out.println("In reject form!");
		
		FormService formService = new FormServiceFullStack();
		
		try {
			authController.checkUser(ctx);
			currentUser = employeeService.readEmployeeByUsername(ctx.cookieStore("username"));
		} catch (Exception e1) {
			e1.printStackTrace();
			ctx.status(401);
			ctx.redirect("login.html");
			return;
		}
		
		// pull data out of ctx
		int formId = Integer.parseInt(ctx.pathParam("id"));
		
		String rejectionReason = ctx.formParam("rejection");
		
		// check user status and direct to correct service
		formService.rejectForm(formId, rejectionReason);
		
		// set return on ctx depending on service return boolean
		ctx.status(200);
		ctx.redirect("/check_assigned_forms.html");
		return;
	}

	public void updateFormGrade(Context ctx) {
		
		log.info("FormController.updateFormGrade[Received context, parsing info]");
		
		int formId = Integer.parseInt(ctx.pathParam("id"));
		String formGrade = ctx.formParam("grade");
		
		log.info("FormController.updateFormGrade[updating formId " + formId + " with grade " + formGrade + "]");
		Form form = formService.readFormById(formId);
		
		if(form.getStatus() == "pending") {
			form.setGrade(formGrade);
		} 
		
		if(formService.updateForm(formId, form)) {
			ctx.status(200);
			ctx.redirect("/check_pending_forms.html");
		} else {
			ctx.status(404);
			ctx.redirect("/check_pending_forms.html");
		}
		
		
			
	}

	public void getFormById(Context ctx) {
		
		log.info("FormController.getFormByid[Received request with  formId: " + ctx.pathParam("id") + "]");
		
//		try {
//			authController.checkUser(ctx);
//			currentUser = employeeService.readEmployeeByUsername(ctx.cookieStore("username"));
//		} catch (Exception e1) {
//			e1.printStackTrace();
//			ctx.status(401);
//			ctx.redirect("login.html");
//			return;
//		}
		
		FormService formService = new FormServiceFullStack();
		
		Form form = formService.readFormById(Integer.parseInt(ctx.pathParam("id")));
		
		if(form != null){
			ctx.json(form);
			ctx.status(200);
		} else {
			ctx.status(404);
		}
	}
	
}
